{"meta":{"title":"WENS1911","subtitle":"moon and reiver","description":"Stay ture to yourself","author":"WenS","url":"http://wens1911.top"},"pages":[{"title":"about-me","date":"2018-05-11T10:35:12.000Z","updated":"2018-05-15T15:01:25.645Z","comments":true,"path":"about-me/index.html","permalink":"http://wens1911.top/about-me/index.html","excerpt":"","text":"�繦��"},{"title":"tags","date":"2018-05-11T10:43:57.000Z","updated":"2018-05-15T14:37:36.057Z","comments":true,"path":"tags/index.html","permalink":"http://wens1911.top/tags/index.html","excerpt":"","text":""},{"title":"categories","date":"2018-05-12T08:26:00.000Z","updated":"2018-05-12T08:26:00.128Z","comments":true,"path":"categories/index.html","permalink":"http://wens1911.top/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"可变参数列表解析","slug":"可变参数列表解析","date":"2018-05-17T13:48:02.000Z","updated":"2018-05-17T13:53:17.298Z","comments":true,"path":"2018/05/17/可变参数列表解析/","link":"","permalink":"http://wens1911.top/2018/05/17/可变参数列表解析/","excerpt":"","text":"可变参数列表的解析函数中除了能传入固定数目的参数，还能接受数量不定的参数。 可变参数列表是通过宏来实现的，这些宏定义于stdarg.h 头文件，它是标准库的一部分。 这个头文件声明了一个类型 va_list 和三个宏 va_start va_arg 和 va_end. 通过可变参数列表计算多个参数的平均值 12345678910111213141516171819202122#include &lt;stdarg.h&gt;#include &lt;stdio.h&gt;float average(int n_values, ...)&#123; va_list arg; //设置访问参数列表的变量 int i = 0; float sum = 0; va_start(arg, n_values); //对可变参数列表进行访问 for (i = 0; i &lt; n_values; i++) sum += va_arg(arg,int); //获取可变参数列表的值 return sum / n_values; va_end(arg); &#125;int main()&#123; int a = 1, b = 2, c = 3, d = 4; int avg1 = average(2, a, c); int avg2 = average(3, a, b, c); printf(&quot;%d\\n&quot;, avg1); printf(&quot;%d\\n&quot;, avg2); return 0;&#125; 转到函数的源码 12345678910typedef char * va_list;//va_list 是声明的char*的指针类型#define _INTSIZEOF(n) ( (sizeof(n) + sizeof(int) - 1) &amp; ~(sizeof(int) - 1) )#define _crt_va_start(ap,v) ( ap = (va_list)_ADDRESSOF(v) + _INTSIZEOF(v) )//将声明的arg变量指向可变参数部分的第一个参数#define _crt_va_arg(ap,t) ( *(t *)((ap += _INTSIZEOF(t)) - _INTSIZEOF(t)) )//取出每一个参数，t表示下一个参数的类型#define _crt_va_end(ap) ( ap = (va_list)0 ) va_start函数声明了一个va_list 类型的变量，用于访问参数列表的未确定的部分。这个变量通过调用va_start进行初始化。va_start(arg , n_values) 它的第一个参数为声明的变量arg ，第二个参数为省略号前最后一个有名字的参数。初始化过程把arg变量设置为指向可变参数部分的第一个参数。 va_arg这个宏用于访问参数，它接受两个参数：va_list变量和参数列表下一个参数的类型。本例中所有参数都为整型，，但在有些函数中，可能需要通过前面获取的数据来判断下一个参数的类型，例如（printf检查格式字符串中的参数来判断它需要打印的参数的类型）。 va_arg 返回这个参数的值，并使变量arg指向下一个参数。 va_end当访问完最后一个可变参数之后，我们需要调用va_end。 可变参数的限制可变参数必须从头到尾按顺序逐个访问，它可以在访问途中停止。但是不能一开始就从中间访问参数。由于参数列表中的可变参数部分并没有原型，所以，所有作为可变参数传递给函数的值都将执行缺省参数类型提升。参数列表中至少要有一个命名参数。否则将无法通过va_start查找到可变参数部分。对于这些宏存在两个基本的限制 这些宏无法判断实际存在参数的数量。 这些宏无法判断每个参数的类型。 要通过使用命名参数才能解决这两个问题，在求平均值的程序中，命名参数指定了可变参数的数量，他们的类型被假定为整型。printf函数中的命名参数是格式字符串，它不仅指定了参数的数量还指定了参数的类型。 #######利用可变参数列表求解最大值 123456789101112131415161718192021222324#include &lt;stdarg.h&gt;#include &lt;stdio.h&gt;int max(int n, ...)&#123; va_list arg; va_start(arg, n); int max = va_arg(arg, int); int t = 0; n--; while (n--)&#123; t = va_arg(arg, int); if (max &lt; t) max = t; &#125; return max;&#125;int main()&#123; int a = 1, b = 2, c = 3; int ret=max(3, a, b, c); printf(&quot;%d&quot;, ret); return 0;&#125; ##利用可变参数列表实现printf1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556#include &lt;stdarg.h&gt;#include &lt;stdio.h&gt;void printfnum(int num)&#123; if (num &gt; 9) printfnum(num/10); putchar(num % 10 + &apos;0&apos;);&#125;print( const char *format, ...)&#123; va_list arg; va_start(arg, format); while (*format) &#123; switch (*format)//首先判断字符的类型，然后将其打印 &#123; case &apos;s&apos;: &#123; char *str = format; str = va_arg(arg, char*); while (*str) &#123; putchar(*str); str++; &#125; &#125; break; case &apos;c&apos;: &#123; char ch = va_arg(arg, char); putchar(ch); &#125; break; case &apos;d&apos;: &#123; int ret = va_arg(arg, int); printfnum(ret); //将数字100通过字符的方式一个个的打印出来 &#125; break; default: putchar(*format); break; &#125; format++; &#125;&#125;int main()&#123; print(&quot;s ccc d.\\n&quot;, &quot;hello&quot;, &apos;b&apos;, &apos;i&apos;, &apos;t&apos;, 100); return 0;&#125;","categories":[],"tags":[{"name":"C语言","slug":"C语言","permalink":"http://wens1911.top/tags/C语言/"}]},{"title":"","slug":"I will be there","date":"2018-05-07T07:08:02.201Z","updated":"2018-05-11T15:13:27.787Z","comments":true,"path":"2018/05/07/I will be there/","link":"","permalink":"http://wens1911.top/2018/05/07/I will be there/","excerpt":"","text":"很高兴遇见你 如果有幸相遇，请互相珍惜。 希望我们都能做自己喜欢的事，爱自己想爱的人。","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2018-05-06T14:51:37.366Z","updated":"2018-05-06T14:51:37.366Z","comments":true,"path":"2018/05/06/hello-world/","link":"","permalink":"http://wens1911.top/2018/05/06/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}